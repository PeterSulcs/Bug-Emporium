name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install root dependencies
      run: npm ci

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint backend
      run: |
        cd backend
        npm run lint || echo "No lint script found, skipping..."

    - name: Lint frontend
      run: |
        cd frontend
        npm run lint

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Test backend
      run: |
        cd backend
        npm test || echo "No test script found, skipping..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'

    - name: Configure kubectl for OpenShift
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}
        
        # Update image tag in values.yaml
        sed -i "s|tag: .*|tag: ${{ github.sha }}|g" helm/bug-emporium/values.yaml
        
        # Deploy with Helm
        helm upgrade --install bug-emporium ./helm/bug-emporium \
          --namespace ${{ secrets.NAMESPACE }} \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set gitlab.endpoint="${{ secrets.GITLAB_ENDPOINT }}" \
          --set gitlab.token="${{ secrets.GITLAB_TOKEN }}" \
          --set gitlab.groupId="${{ secrets.GITLAB_GROUP_ID }}" \
          --set gitlab.emporiumLabel="${{ secrets.EMPORIUM_LABEL }}" \
          --set gitlab.priorityLabel="${{ secrets.PRIORITY_LABEL }}" \
          --wait --timeout=5m

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n ${{ secrets.NAMESPACE }} -l app=bug-emporium
        kubectl get routes -n ${{ secrets.NAMESPACE }} -l app=bug-emporium
